📑 Step‑by‑Step Beginner Setup Guide
Clone or unzip the project.

Flutter prerequisites: install Flutter SDK, Android Studio, Xcode.

Firebase CLI: npm install -g firebase-tools → firebase login.

Configure Firebase:

Copy firebase_options.dart from your Firebase console (FlutterFire CLI).

Place google-services.json (android) and GoogleService-Info.plist (iOS).

Enable Auth providers (Email/Password, Google).

Initialize Firebase in project: firebase init → choose Firestore, Functions, Hosting.

Install dependencies: flutter pub get.

Run backend functions:

bash
Copy
Edit
cd firebase/functions
npm install
firebase deploy --only functions
Deploy Firestore & Storage rules:

bash
Copy
Edit
firebase deploy --only firestore:rules,storage:rules
Run Flutter app:

bash
Copy
Edit
flutter run
Build Web Admin & host:

bash
Copy
Edit
flutter build web -t web_admin/lib/main.dart
firebase deploy --only hosting
Assign roles via Admin UI → Role Manager or Cloud Function setUserRole.

Test all features: login, admin guard, edit/delete, search, approve, push notifications, dynamic links, dark mode.

🔧 You now have every file and step needed. Enjoy building and managing your devotional app!




✅ PREREQUISITES
Make sure you have the following installed:

Flutter SDK

Android Studio or VS Code

Node.js (for Firebase CLI)

Firebase CLI:

bash
Copy
Edit
npm install -g firebase-tools
A Firebase Project created at https://console.firebase.google.com

📁 1. Extract the Downloaded Bundle
Unzip devotional_app_complete_bundle.zip into your preferred project directory.

🔧 2. Firebase Setup (Backend)
✅ 2.1 Initialize Firebase
Go to the unzipped folder, then open terminal:

bash
Copy
Edit
firebase login
firebase init
Select: Firestore, Hosting, Functions, Storage

Use existing project → select your Firebase project

Firestore rules: Y

Functions language: JavaScript or TypeScript (based on included code)

Hosting: public folder — choose build/web (for Flutter Web)

Configure as SPA: Yes

Overwrite: No

✅ 2.2 Set Firebase Config in Flutter
Open lib/firebase_options.dart and replace config with yours (from Firebase Console → Project Settings → General → "Your apps" → Flutter).

If missing, regenerate with:

bash
Copy
Edit
flutterfire configure
🔥 3. Flutter Setup (Frontend + Admin)
✅ 3.1 Get Packages
Run:

bash
Copy
Edit
flutter pub get
✅ 3.2 Run the App
To run on Android/iOS emulator:

bash
Copy
Edit
flutter run
To build for web (web admin panel):

bash
Copy
Edit
flutter build web
🛠 4. Firebase Firestore & Storage Structure
✅ 4.1 Firestore Collections
Manually add or import Firestore structure (refer to included .yaml/.cpp/.pgsql structure files):

Connect

Magazines

Temples

Stotras

Notifications

Admins

ActivityLogs

Roles

✅ 4.2 Firebase Storage Paths
Upload markdown .md files in:

swift
Copy
Edit
Temples/Andhrapradesh/
Temples/Maharashtra/
Temples/Telangana/
...
Ensure appropriate rules allow read access to .md files.

👮 5. Admin Roles
In Firestore > Admins collection:
Each admin document should have fields like:

json
Copy
Edit
{
  "email": "admin@example.com",
  "role": "superadmin", // or editor, moderator, etc.
  "approved": true
}
🚀 6. Deploy to Firebase Hosting
Make sure flutter build web is done.

Then:

bash
Copy
Edit
firebase deploy
This will host your web admin panel and app (if web version is used) at:

arduino
Copy
Edit
https://your-project-id.web.app/
🌙 7. Enable Dark Mode & Features
Dark mode toggle is built-in.
Advanced features implemented:

✅ Role-Based Admin Views

✅ Push Notifications Manager

✅ Pagination & Lazy Loading

✅ Edit Modals / Delete Dialogs

✅ Activity Logs

✅ Approve/Reject

✅ Search/Filter Controls

🔒 8. Firebase Rules (Example)
Firestore:
js
Copy
Edit
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    match /Admins/{docId} {
      allow read, write: if request.auth != null;
    }

    match /Connect/{docId} {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/Admins/$(request.auth.uid)).data.role == 'editor';
    }

    // ...similar for other collections
  }
}
Storage:
js
Copy
Edit
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    match /Temples/{state}/{filename} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.admin == true;
    }
  }
}
✅ You're Done!
You can now:

Run your devotional app on mobile or web

Access the full-featured admin panel (in-app and web)

Manage your content, push notifications, roles, etc.






📄 firebase.json
json
Copy
Edit
{
  "database": {
    "rules": "firebase/firestore.rules"
  },
  "storage": {
    "rules": "firebase/storage.rules"
  },
  "functions": {
    "source": "firebase/functions"
  },
  "hosting": [
    {
      "target": "web-admin",
      "public": "web_admin/build/web",
      "ignore": ["firebase.json", "**/.*", "**/node_modules/**"],
      "rewrites": [
        {
          "source": "**",
          "destination": "/index.html"
        }
      ]
    },
    {
      "target": "app-docs",
      "public": "docs", 
      "ignore": ["firebase.json", "**/.*", "**/node_modules/**"]
    }
  ]
}
database.rules points at your Firestore security rules.

storage.rules points at your Storage rules.

functions.source is the folder with your Cloud Functions code.

hosting has two targets:

web-admin for your Flutter‑Web admin panel (build output in web_admin/build/web).

app-docs if you wish to publish your setup guide or API docs under docs/.

📄 .firebaserc
json
Copy
Edit
{
  "projects": {
    "default": "YOUR_FIREBASE_PROJECT_ID"
  },
  "targets": {
    "YOUR_FIREBASE_PROJECT_ID": {
      "hosting": {
        "web-admin": ["web-admin"],
        "app-docs": ["app-docs"]
      }
    }
  }
}
Replace "YOUR_FIREBASE_PROJECT_ID" with your actual Firebase project ID.

The targets block associates the two hosting sites (web-admin and app-docs) with your project so you can deploy each with:

bash
Copy
Edit
firebase deploy --only hosting:web-admin
firebase deploy --only hosting:app-docs
With these in place, run:

bash
Copy
Edit
firebase use default
firebase deploy
to push your rules, functions, and hosting sites.